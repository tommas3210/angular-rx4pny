import { CdkOverlayOrigin, ConnectionPositionPair, Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DwUpdateHostClassService as UpdateCls } from '../core/services/update-host-class.service';
import { DwI18nService as I18n } from '../i18n/dw-i18n.service';
export declare class DwTimePickerComponent implements ControlValueAccessor, OnInit, AfterViewInit {
    private element;
    private renderer;
    private overlay;
    private positionBuilder;
    private i18n;
    private updateCls;
    private _disabled;
    private _value;
    private _allowEmpty;
    private _autoFocus;
    private _onChange;
    private _onTouched;
    private _hideDisabledOptions;
    isInit: boolean;
    origin: CdkOverlayOrigin;
    overlayPositions: ConnectionPositionPair[];
    inputRef: ElementRef;
    dwSize: string | null;
    dwHourStep: number;
    dwMinuteStep: number;
    dwSecondStep: number;
    dwClearText: string;
    dwPopupClassName: string;
    dwPlaceHolder: string;
    dwAddOn: TemplateRef<void>;
    dwDefaultOpenValue: Date;
    dwDisabledHours: () => number[];
    dwDisabledMinutes: (hour: number) => number[];
    dwDisabledSeconds: (hour: number, minute: number) => number[];
    dwFormat: string;
    dwOpen: boolean;
    dwOpenChange: EventEmitter<boolean>;
    dwHideDisabledOptions: boolean;
    dwAllowEmpty: boolean;
    dwAutoFocus: boolean;
    dwDisabled: boolean | string;
    value: Date | null;
    open(): void;
    close(): void;
    updateAutoFocus(): void;
    private setClassMap;
    focus(): void;
    blur(): void;
    constructor(element: ElementRef, renderer: Renderer2, overlay: Overlay, positionBuilder: OverlayPositionBuilder, i18n: I18n, updateCls: UpdateCls);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    writeValue(time: Date | null): void;
    registerOnChange(fn: (time: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
}
