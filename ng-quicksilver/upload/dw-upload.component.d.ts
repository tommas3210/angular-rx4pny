import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, SimpleChanges } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { DwI18nService } from '../i18n/dw-i18n.service';
import { ShowUploadListInterface, UploadChangeParam, UploadFile, UploadFilter, UploadListType, UploadType, ZipButtonOptions } from './interface';
import { DwUploadBtnComponent } from './dw-upload-btn.component';
export declare class DwUploadComponent implements OnInit, OnChanges, OnDestroy {
    private cd;
    private i18n;
    private i18n$;
    locale: any;
    upload: DwUploadBtnComponent;
    dwType: UploadType;
    private _limit;
    dwLimit: number;
    private _size;
    dwSize: number;
    dwFileType: string;
    dwAccept: string | string[];
    dwAction: string;
    dwDirectory: boolean;
    dwBeforeUpload: (file: UploadFile, fileList: UploadFile[]) => boolean | Observable<any>;
    dwCustomRequest: (item: any) => Subscription;
    dwData: {} | ((file: UploadFile) => {});
    dwFilter: UploadFilter[];
    dwFileList: UploadFile[];
    dwFileListChange: EventEmitter<UploadFile[]>;
    private _disabled;
    dwDisabled: boolean;
    dwHeaders: {} | ((file: UploadFile) => {});
    dwListType: UploadListType;
    private _multiple;
    dwMultiple: boolean;
    dwName: string;
    private _showUploadList;
    dwShowUploadList: boolean | ShowUploadListInterface;
    private _showBtn;
    dwShowButton: boolean;
    private _withCredentials;
    dwWithCredentials: boolean;
    dwRemove: (file: UploadFile) => boolean | Observable<boolean>;
    dwPreview: (file: UploadFile) => void;
    dwChange: EventEmitter<UploadChangeParam>;
    _btnOptions: ZipButtonOptions;
    private zipOptions;
    constructor(cd: ChangeDetectorRef, i18n: DwI18nService);
    private fileToObject;
    private getFileItem;
    private removeFileItem;
    private genErr;
    private genThumb;
    private onStart;
    private onProgress;
    private onSuccess;
    private onError;
    private dragState;
    fileDrop(e: DragEvent): void;
    onRemove: (file: UploadFile) => void;
    prefixCls: string;
    classList: string[];
    setClassMap(): void;
    ngOnInit(): void;
    ngOnChanges(changes: {
        [P in keyof this]?: SimpleChange;
    } & SimpleChanges): void;
    ngOnDestroy(): void;
}
