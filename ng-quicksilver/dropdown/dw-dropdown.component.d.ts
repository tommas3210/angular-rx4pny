import { CdkConnectedOverlay, ConnectedOverlayPositionChange, ConnectionPositionPair } from '@angular/cdk/overlay';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { DwMenuDirective } from '../menu/dw-menu.directive';
import { DwDropDownDirective } from './dw-dropdown.directive';
export declare type DwPlacement = 'bottomLeft' | 'bottomCenter' | 'bottomRight' | 'topLeft' | 'topCenter' | 'topRight';
export declare class DwDropDownComponent implements OnInit, OnDestroy, AfterViewInit {
    private renderer;
    protected changeDetector: ChangeDetectorRef;
    private _clickHide;
    private _visible;
    private _disabled;
    private unsubscribe$;
    hasFilterButton: boolean;
    triggerWidth: number;
    placement: DwPlacement;
    dropDownPosition: 'top' | 'center' | 'bottom';
    positions: ConnectionPositionPair[];
    $subOpen: BehaviorSubject<boolean>;
    $visibleChange: Subject<boolean>;
    dwOrigin: DwDropDownDirective;
    dwMenu: DwMenuDirective;
    dwTrigger: 'click' | 'hover';
    dwVisibleChange: EventEmitter<boolean>;
    cdkOverlay: CdkConnectedOverlay;
    dwClickHide: boolean;
    dwDisabled: boolean;
    dwVisible: boolean;
    dwPlacement: DwPlacement;
    onClickEvent(): void;
    onMouseEnterEvent(): void;
    onMouseLeaveEvent(): void;
    hide(): void;
    show(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    setTriggerWidth(): void;
    startSubscribe(observable$: Observable<boolean>): void;
    onVisibleChange: (visible: boolean) => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    readonly hasBackdrop: boolean;
    constructor(renderer: Renderer2, changeDetector: ChangeDetectorRef);
}
