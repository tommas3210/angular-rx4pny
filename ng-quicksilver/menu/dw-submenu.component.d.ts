import { CdkConnectedOverlay, ConnectedOverlayPositionChange, ConnectionPositionPair } from '@angular/cdk/overlay';
import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DwDropDownButtonComponent } from '../dropdown/dw-dropdown-button.component';
import { DwDropDownComponent } from '../dropdown/dw-dropdown.component';
import { DwMenuDirective } from './dw-menu.directive';
export declare class DwSubMenuComponent implements OnInit, OnDestroy, AfterContentInit {
    dwMenuDirective: DwMenuDirective;
    private cd;
    private dwSubMenuComponent;
    private dwDropDownComponent;
    private dwDropDownButtonComponent;
    private _open;
    private _disabled;
    private $mouseSubject;
    private unsubscribe$;
    placement: string;
    $subOpen: BehaviorSubject<boolean>;
    isInDropDown: boolean;
    isInSubMenu: boolean;
    level: number;
    triggerWidth: any;
    subMenus: QueryList<DwSubMenuComponent>;
    dwOpenChange: EventEmitter<boolean>;
    cdkOverlay: CdkConnectedOverlay;
    trigger: ElementRef;
    dwOpen: boolean;
    dwDisabled: boolean;
    readonly subItemSelected: boolean;
    readonly submenuSelected: boolean;
    readonly expandState: string;
    readonly overlayPositions: ConnectionPositionPair[];
    clickSubMenuTitle($event: MouseEvent): void;
    clickSubMenuDropDown(): void;
    readonly subMenuMode: string;
    onMouseEnterEvent(e: MouseEvent): void;
    onMouseLeaveEvent(e: MouseEvent): void;
    readonly setDropDownSubmenuClass: boolean;
    readonly setMenuSubmenuOpenClass: boolean;
    readonly setDropDownVerticalClass: boolean;
    readonly setDropDownHorizontalClass: boolean;
    readonly setDropDownDisabled: boolean;
    readonly setMenuSubmenuClass: boolean;
    readonly setMenuSubmenuSelectedClass: boolean;
    readonly setMenuVerticalClass: boolean;
    readonly setMenuHorizontalClass: boolean;
    readonly setMenuInlineClass: boolean;
    readonly setMenuDisabled: boolean;
    setTriggerWidth(): void;
    onPositionChange($event: ConnectedOverlayPositionChange): void;
    handleOpenEvent: (data: boolean) => void;
    constructor(dwMenuDirective: DwMenuDirective, cd: ChangeDetectorRef, dwSubMenuComponent: DwSubMenuComponent, dwDropDownComponent: DwDropDownComponent, dwDropDownButtonComponent: DwDropDownButtonComponent);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
}
